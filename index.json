[{"content":"よく「イジり」よく「ハマる」 楽しいことに「ハマる」という使い方もしますが、ここでは「問題から抜け出せない、なかなか解決しない」という意味での「ハマる」の話です。 私は最近もハマっていました、システムをイジってれば避けることができませんよね。\n 「hadv-book 構築」ページで 少し大きめの配置図 を PlantUML でを書いていた時に、オブジェクトがアッチコッチに移動してしまい、なかなかいい位置に配置されてくれない「ハマり」 「カイハツNoヒト」はレスポンシブデザインですが、モバイルで表示した時にソースコードの一部の文字が大きくなってしまい、どうしても行番号と行の位置が一致しない「ハマり」 「カイハツNoヒト」を iPhone Chrome で横長（ランドスケープ）表示にしてから縦長（ポートレート）表示すると、なぜか表示の横幅が狭くなってしまうという「ハマり」 「Python による AI プログラミング入門」学習環境構築で、PyStruct のインストールに失敗してしまう「ハマり」 （未解決）VSCode で AsciiDoc を編集している時に自動生成される asciidoctor-diagram の画像およびキャッシュデータが、前に編集していた *.adoc ファイルの場所に生成されてしまう「ハマり」  まるで、目隠しして歩いているかのように、目の前に壁があれば必ずぶち当たり、落とし穴があれば必ず落ちます。\n「またか、、、」と。\n慣れたものです、いまさら驚きません。こういうものなんだ、いつも通りです。\nほとんどは解決する  オブジェクトとオブジェクトを hidden 属性の線で結んで位置関係を記述する（––[hidden]up––,––[hidden]down–– のような線を引く）と、ある程度ですがオブジェクトの配置をコントロールできる。 わからん、配置コントロールのポイントはオブジェクトを定義する順序なのか？、、あー、「hidden」で線を引く？そんなもんがあるのね、、、んじゃサッソク、、、おい、right って書いたのになんで left に移動する？？？優先順位はどうなってるんだ？？？（結局、すごい時間がかかった末、コツをつかむ）\n  一部のモバイル端末ではテキストの自動拡大アルゴリズムというものがあって、状況に応じて自動的に文字の大きさをコントロールする。それを防ぐには CSS で「-webkit-text-size-adjust: 100%」のようにスタイルを指定する必要がある。 おそらく、この未知なるレスポンスデザインが原因だろ、、、しかし Chrome のデベロッパーツールの表示と iPhone の表示が違うのは何故だ、何故なんだ、、、へ？自動拡大アルゴリズム？そんな仕組み知らんて、、、しかも一部の td タグの中だけに適用しないでくれよ、、、紛らわしい。。。\n  iOS 版 Chrome のバグ。表示の横幅が戻らなくなってしまった場合は、URL を再入力して新しく開きなおすしかない。試験的な機能だが、Chrome で「chrome://flags」にアクセスし、「Fullscreen Smooth Scrolling」を「Disabled」にすると防止できる。 きっとコレも知らない設定があるに違いない、、、それを探し当ててやる、、、おかしいな、見たことのない CSS をこんだけ探してみたのに手がかりが全然ない、、、って、バグですか？？？\n  書籍の サポートサイト に「PyPI にある pystruct 0.3.2 は Python 3.7 に対応していないため、インストールに失敗します」という情報があり、ソースからビルドするとインストールできる。 これ docker 上でやってるからダメなんかなぁ、、、いったん WSL に直接 Python 入れてやってみた方がいいのかなぁ、、、あーどれどれ、おっ、書籍のサポートページあったんね、、、って、ここに書いてあるじゃん。。。\n   最後の「ハマり」はまだ未解決ですが、こんなものでした。\n調べれば、大抵のことは書いてありますね、そこにたどり着くまでが大変なのですが。言語の壁を乗り越えれば、より早く、答えに近づくことができる気がします。\n本当に自分の中から何もアイデアが出てこなくなった時、私は「寝る」ことにしています。不思議なことに「寝る」と新しい「閃き」があるものです。寝ている間にも、脳はいろいろな情報の整理のために、休まず働きまくっているんですね。\n彷徨って得るもの とはいえ、期限の切られている仕事の中で「ハマり」たくはないです。\nじゃぁ「ハマり」は回避できるものなのか、無理です。ならば、、、先にハマっておこう、もうコレしかない。\nタクシーや運送屋さんとかなら当たり前にやっていそうなことです、何も不思議なことではない。はじめてソコが自分の担当区域になった、必要最小限の時間で１件をこなして数を稼がなければいけない、「道に迷う」イコール「路頭に迷う」。それなら、先に迷いそうなところを回ってあらかじめ迷っておこう、、、ほら、同じですよ。\n自分から道に迷いに行くと、近道や、抜け道、地図に載ってない情報すら得られてしまうことだってありますよね。いざピンチになった時に、自分を助けてくれます、くれました。\n（余談ですが、カーナビに頼るようになってから道に迷うことが多くなりました。）\n今日も、、、 ——— さて、と。\nそれじゃぁ、いまから道に迷いに行ってきます。\n","permalink":"/posts/2021/04/2021-04-03-experience-is-a-fortune/","summary":"よく「イジり」よく「ハマる」 楽しいことに「ハマる」という使い方もしますが、ここでは「問題から抜け出せない、なかなか解決しない」という意味での","title":"日記：「ハマる」は嫌だが財産"},{"content":" はじめに 必須要件 以下が可能な環境を構築する\n   書籍「 Python による AI プログラミング入門 」による学習に必要な Python 環境\n      1. インストールパッケージ 表 1. インストールパッケージ（2021/04/02調査）         名称 パッケージ 最新 Version Python 対応 Version 説明     NumPy\n 1.20.2 （2021/03/28）\n Python\u0026gt;=3.7\n Python の科学計算のための基本的なパッケージ\n   SciPy\n 1.6.2 （2021/03/25）\n Python\u0026gt;=3.7, Python\u0026lt;3.10\n Python 用の科学計算ツール\n   scikit-learn\n 0.24.1 （2021/01/20）\n Python\u0026gt;=3.6\n 予測データ分析のためのシンプルで効率的なツール\n   Matplotlib\n 3.4.1 （2021/03/31）\n Python\u0026gt;=3.7\n 静的、アニメーション、およびインタラクティブな視覚化を作成するための 包括的なライブラリ\n   Jupyter\n jupyterLab 3.0.12 （2021/03/20）\n Python\u0026gt;=3.6\n 数十のプログラミング言語にわたってインタラクティブなデータサイエンスと 科学計算をサポートするためのオープンソースソフトウェア\n   SymPy\n 1.7.1 （2020/12/13）\n Python\u0026gt;=3.6\n 記号数学用の Python ライブラリ\n   NLTK\n 3.5 （2020/04/13）\n Python\u0026gt;=3.5, Python\u0026lt;3.9\n 人間の言語データを処理する Python プログラムを構築するための主要プラットフォーム\n   pandas\n 1.2.3 （2021/03/02）\n Python\u0026gt;=3.7.1\n 高速で強力、柔軟性があり、使いやすいオープンソースのデータ分析および操作ツール\n   Gensim\n 4.0.1 （2021/04/01）\n Python\u0026gt;=3.6\n 人間のためのトピック分析ツール\n   CVXOPT\n 1.2.6 （2021/02/19）\n Python\u0026gt;=3.5, Python\u0026lt;3.10\n 凸最適化問題を解く Python のフリーのライブラリ\n   opencv-python\n 4.5.1.48 （2021/01/02）\n Python\u0026gt;=3.6\n Python 用の非公式のビルド済み CPU のみの OpenCV パッケージ\n   TensorFlow\n 2.4.1 （2021/01/22）\n Python\u0026gt;=3.5, Python\u0026lt;3.9\n 機械学習向けに開発されたエンドツーエンドのオープンソース プラットフォーム ※ numpy~=1.19.2\n   pandas-datareader\n 0.9.0 （2020/07/10）\n Python\u0026gt;=3.6\n pandas のためのリモートデータアクセス（経済データや金融商品の価格データ）\n   kanren\n 0.2.3 （2016/12/04）\n Python\u0026gt;=3.5\n Python での論理プログラミング\n   simpleai\n 0.8.2 （2018/09/07）\n Python 3.x\n 人工知能アルゴリズムの多くを実装しているシンプルなAI\n   deap\n 1.3.1 （2020/01/21）\n Python 3.x\n アイデアのラピッドプロトタイピングとテストのための新しい進化的計算フレームワーク\n   easyAI\n 1.0.0.4 （2017/07/08）\n -\n Tic Tac Toe、Connect 4、Reversiなどの2人用抽象ゲーム用の 純粋なPython人工知能フレームワーク\n   hmmlearn\n 0.2.5 （2021/02/03）\n Python\u0026gt;=3.5\n 教師なしの学習と隠されたマルコフモデルの推論のためのアルゴリズムのセット\n   PyStruct\n 0.3.2 （2018/10/02）\n -\n Pythonでの構造化された学習と予測\n   NeuroLab\n 0.3.5 （2015/01/23）\n -\n Python用のシンプルで強力なニューラルネットワークライブラリ\n   Gym\n 0.18.0 （2020/12/19）\n Python\u0026gt;=3.6\n 強化学習アルゴリズムを開発および比較するためのツールキット\n      2. Dev Container の構築 2-1. ファイル・フォルダー構成図  図 1. ファイル・フォルダー構成   2-2. 各ファイルの内容 [1] learn-ds-python/Dockerfile 1 2 3 4 5 6 7 8 9 10 11 12 13 ARGDOCKER_PYTHON_VERSION=latest (1) FROMpython:${DOCKER_PYTHON_VERSION} (2) LABELversion=\u0026#34;20210324\u0026#34; LABELdescription=\u0026#34;Pythonの公式Dockerイメージをカスタマイズ。\u0026#34; WORKDIR/usr/src/app (3) COPYrequirements.txt ./ RUN pip install --no-cache-dir -r requirements.txt (4) RUN wget https://github.com/pystruct/pystruct/archive/refs/heads/master.zip \\  \u0026amp;\u0026amp; unzip ./master.zip \u0026amp;\u0026amp; cd ./pystruct-master/src \u0026amp;\u0026amp; cython utils.pyx \\  \u0026amp;\u0026amp; cd ../ \u0026amp;\u0026amp; python setup.py install (5)      1 デフォルトのバージョン。   2 [4] docker-compose.yml 内の DOCKER_PYTHON_VERSION 指定を書き換えることで、使用するバージョンを上書きできます。   3 ワークディレクトリを指定   4 Python パッケージを追加   5 PyStruct を Source からビルド＆インストール     [2] learn-ds-python/requirements.txt 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 numpy==1.19.2 scipy==1.6.2 scikit-learn==0.24.1 matplotlib==3.4.1 jupyterlab==3.0.12 sympy==1.7.1 nltk==3.5 pandas==1.2.3 gensim==4.0.1 cvxopt==1.2.6 opencv-python==4.5.1.48 tensorflow==2.4.1 pandas-datareader==0.9.0 kanren==0.2.3 simpleai==0.8.2 deap==1.3.1 easyAI==1.0.0.4 hmmlearn==0.2.5 neurolab==0.3.5 gym==0.18.0 Cython==0.29.22     [3] devcontainer.json 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 {\u0026#34;name\u0026#34;:\u0026#34;learn-ds-python\u0026#34;,\u0026#34;dockerComposeFile\u0026#34;:\u0026#34;docker-compose.yml\u0026#34;,(1) \u0026#34;service\u0026#34;:\u0026#34;learn-ds-python-sv\u0026#34;,(2) \u0026#34;workspaceFolder\u0026#34;:\u0026#34;/usr/src/app\u0026#34;,\u0026#34;settings\u0026#34;:{\u0026#34;terminal.integrated.shell.linux\u0026#34;:\u0026#34;/bin/bash\u0026#34;},\u0026#34;extensions\u0026#34;:[(3) \u0026#34;MS-CEINTL.vscode-language-pack-ja\u0026#34;,\u0026#34;vscode-icons-team.vscode-icons\u0026#34;,\u0026#34;alefragnani.project-manager\u0026#34;,\u0026#34;alefragnani.bookmarks\u0026#34;,\u0026#34;xyz.local-history\u0026#34;,\u0026#34;gruntfuggly.todo-tree\u0026#34;,\u0026#34;nobuhito.printcode\u0026#34;,\u0026#34;coenraads.bracket-pair-colorizer-2\u0026#34;,\u0026#34;oderwat.indent-rainbow\u0026#34;,\u0026#34;mosapride.zenkaku\u0026#34;,\u0026#34;mechatroner.rainbow-csv\u0026#34;,\u0026#34;streetsidesoftware.code-spell-checker\u0026#34;,\u0026#34;christian-kohler.path-intellisense\u0026#34;,\u0026#34;wmaurer.vscode-jumpy\u0026#34;,\u0026#34;ryu1kn.partial-diff\u0026#34;,\u0026#34;tyriar.sort-lines\u0026#34;,\u0026#34;mhutchie.git-graph\u0026#34;,\u0026#34;eamodio.gitlens\u0026#34;,\u0026#34;donjayamanne.githistory\u0026#34;,\u0026#34;esbenp.prettier-vscode\u0026#34;,\u0026#34;visualstudioexptteam.vscodeintellicode\u0026#34;,\u0026#34;ics.japanese-proofreading\u0026#34;,\u0026#34;formulahendry.code-runner\u0026#34;,\u0026#34;jebbs.plantuml\u0026#34;,\u0026#34;yog.yog-plantuml-highlight\u0026#34;,\u0026#34;redhat.vscode-yaml\u0026#34;,\u0026#34;redhat.vscode-xml\u0026#34;,\u0026#34;slevesque.vscode-hexdump\u0026#34;,\u0026#34;grapecity.gc-excelviewer\u0026#34;,\u0026#34;github.vscode-pull-request-github\u0026#34;,\u0026#34;hediet.vscode-drawio\u0026#34;,\u0026#34;ms-python.python\u0026#34;,\u0026#34;ms-python.vscode-pylance\u0026#34;]}      1 実行する docker-compose.yml を指定。   2 接続するサービスを指定。   3 接続先にインストールする VSCode 拡張機能を指定。     [4] docker-compose.yml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 version: \u0026#34;3.9\u0026#34; services: learn-ds-python-sv: container_name: learn-ds-python image: h16k148/learn-ds-python:latest tty: true (1) init: true (2) build: context: ./learn-ds-python dockerfile: Dockerfile args: - DOCKER_PYTHON_VERSION=3.8.8-buster (3) volumes: - ..:/usr/src/app      1 コマンドを起動し続ける指定。   2 起動時に軽量な init プロセスを仕込む指定。   3 ベースとなるイメージのバージョンを指定        3. Dev Container を起動 VSCode で .devcontainer ディレクトリがある [root] フォルダーを開き、Ctrl+Shift+PまたはF1で「Remote-Containers: Reopen in Container」を実行します。\n   4. VSCode で Jupyter Notebook を起動 4-1. Dev Container 起動直後    4-2. インタープリター選択 Ctrl+Shift+PまたはF1でコマンドパレットを表示し、「python select interpreter」…​と入力して、jupyterlab をインストールした Python 環境を選択します。\n    4-3. 空のノートブックを新規作成 Ctrl+Shift+PまたはF1でコマンドパレットを表示し、「jupyter create」…​と入力すると出てくる「Jupyter: Create New Blank Notebook」を選択します。\n   ノートブックエディタが開きます。\n    4-4. テスト実行   正常に動作しています。 これで、データサイエンス学習のための Python 環境が構築できました。\n    付録 A: 更新履歴 2021-04-02 ver. 1.0.0   PyStruct 問題解決\n   2021-03-31 ver. 0.9.0   ドラフト版作成\n     ","permalink":"/notes/construction/learn-env/20210331-01/","summary":"はじめに 必須要件 以下が可能な環境を構築する 書籍「 Python による AI プログラミング入門 」による学習に必要な Python 環境 1. インストールパッケージ 表 1. インストー","title":"データサイエンス学習のための Python 環境構築"},{"content":" はじめに hadv とは何か hadv とは、Hugo, Asciidoctor, Docker, VSCode を上手に使って構築したドキュメント執筆環境を私が勝手に名付けたものです。 2021 年 3 月時点でこのような環境を作っている例はインターネット上ではまだ見かけていません。誰かの役に立つことを願っています。 ちなみに、タイトルの hadv-book とは「hadv 環境上に Hugo の book テーマを使って構築したドキュメント執筆環境のひな形」を指しています。 この文書の最終目的は、hadv-book を構築することです。\n  hadv の特徴   VSCode の Dev Container 機能を使用することで、ローカル環境を汚しません。\n  Hugo, Asciidoctor それぞれの公式 Docker イメージを拡張して使用します。\n  Hugo（静的サイトジェネレーター）を使ってドキュメントを静的な Web サイトとして公開できます。\n  Hugo で公開するドキュメントを AsciiDoc 形式（Asciidoctor を使用）で記述することができます。\n  VSCode で Markdown 形式、AsciiDoc 形式のドキュメントをプレビューしながら記述できます。\n    このドキュメントについて このドキュメントでは、hadv 環境構築に必要な設定などを公開しますが、文章が無駄に長くなることを避けるために説明は控え目にしています。 公開後も改善点が見つかり次第、更新していくつもりです。\n    1. hadv の環境構築 1-1. ファイル・フォルダの配備 hadv 環境は VSCode の Dev Container という仕組みを使用します。 そのため、配備するファイルは Dev Container の構成ファイルということになります。\n  図 1. ファイル・フォルダ一覧  任意の場所にルートフォルダを用意し、図１. ファイル・フォルダ一覧 の通りにファイル・フォルダを配備します。 配備するファイルの中身については1-2. 構成ファイルで紹介しますので、そちらをご覧ください。\n  1-2. 構成ファイル 図１. ファイル・フォルダ一覧 にあるファイルを順番に紹介します。\n [1] hadv-asciidoctor/Dockerfile 1 2 3 4 5 6 7 8 9 FROMasciidoctor/docker-asciidoctor:1.3.3 (1) LABELversion=\u0026#34;20210404\u0026#34; LABELdescription=\u0026#34;公式イメージ（asciidoctor/docker-asciidoctor:1.3.3）を拡張\u0026#34; RUN apk --no-cache add docker-cli git-subtree \\ (2) \u0026amp;\u0026amp; gem install --no-document asciidoctor-html5s (3) RUN ln -s /documents /src (4) COPYhugo /usr/local/bin (5)      1 ベースとなる asciidoctor/docker-asciidoctor イメージのバージョンを指定。   2 Docker-from-Docker のために docker-cli を追加。任意で git の機能を追加。   3 Asciidoctor の拡張機能を追加。   4 重要なシンボリックリンクを設置。   5 hugo コマンドを /usr/local/bin の下に配備。        これは h16k148/hadv-asciidoctor イメージを作成するためのファイルです。\n         [PREFIX]-hadv-asciidoctor h16k148/hadv-asciidoctor イメージから [PREFIX]-hadv-asciidoctor コンテナが作られます。 （→参照） 上記 [PREFIX] には [7] .env ファイルで定義した変数の値が入ります。 （変数の値が h16k148 の場合、h16k148-hadv-asciidoctor となる） これにより、複数の hadv 環境を同時に使用する時にコンテナ名が被らないようにしています。\n         重要なシンボリックリンク h16k148/hadv-asciidoctor と h16k148/hadv-hugo の WORKDIR の違いを吸収します。 h16k148/hadv-hugo イメージから作成したコンテナの hugo は /src フォルダを「Hugo root directory」として動きます。 hugo のビルド中に /usr/local/bin/asciidoctor が呼び出されると、その引数には /src から始まるパスが含まれてしまいます。 そのため、asciidoctor の実体がある [PREFIX]-hadv-asciidoctor コンテナに /documents を指す /src シンボリックリンクがないと、正常に動作しません。\n      [2] hadv-asciidoctor/hugo 1 2 3 4 5 6 7 #!/bin/bash docker run --rm -it \\ -e HADV_NAME_PREFIX=${HADV_NAME_PREFIX} \\ (1) -v \u0026#34;${LOCAL_WORKSPACE_FOLDER}:/src\u0026#34; \\ (2) -v \u0026#34;/var/run/docker.sock:/var/run/docker.sock\u0026#34; \\ (3) -p 1313:1313 \\ (4) h16k148/hadv-hugo:latest \u0026#34;$@\u0026#34; (5)      1 起動時に環境変数 HADV_NAME_PREFIX をセット。   2 Windows 上のローカルワークスペースフォルダを /src にマウント。   3 Docker-from-Docker のために、/var/run/docker.sock をマウント。   4 hugo server を起動した時に外部からアクセスできるようにポートを指定。   5 h16k148/hadv-hugo イメージからコンテナを作成し、その中の hugo を実行。        これは Docker-from-Docker を使って、実体の hugo を実行するために使います。 [1] hadv-asciidoctor/Dockerfile をビルドして作るイメージ（h16k148/hadv-asciidoctor）の /usr/local/bin にコピーされます。 VSCode が接続している [PREFIX]-hadv-asciidoctor コンテナのターミナルで使います。\n      [3] hadv-hugo/Dockerfile 1 2 3 4 5 6 7 FROMklakegg/hugo:0.82.0-ext-alpine (1) LABELversion=\u0026#34;20210404\u0026#34; LABELdescription=\u0026#34;公式イメージ（klakegg/hugo:0.82.0-ext-alpine）を拡張\u0026#34; RUN apk --no-cache add docker-cli (2) COPY.devcontainer/hadv-hugo/asciidoctor /usr/local/bin (3)      1 ベースとなる klakegg/hugo イメージのバージョンを指定。   2 Docker-from-Docker のために docker-cli を追加。   3 asciidoctor コマンドを /usr/local/bin の下に配備。        これは h16k148/hadv-hugo イメージを作成するためのファイルです。 いつでも使えるように、Dev Container 開始時にイメージの作成だけはしておきます（→参照）\n      [4] hadv-hugo/asciidoctor 1 2 3 4 5 6 7 #!/bin/bash _LOG_FPATH=\u0026#34;/src/.logs/hugo.log\u0026#34; (1) _DATE_TIME=$(TZ=UTC-9 date \u0026#34;+%Y/%m/%d %H:%M:%S.%N\u0026#34;) (2) _CONTAINER_NAME=\u0026#34;${HADV_NAME_PREFIX}-hadv-asciidoctor\u0026#34; (3) if [ ! -d \u0026#34;${_LOG_FPATH%/*}\u0026#34; ]; then mkdir -p \u0026#34;${_LOG_FPATH%/*}\u0026#34;; fi (4) echo \u0026#34;${_DATE_TIME}- [Asciidoctor] ${_CONTAINER_NAME}: $@\u0026#34; \u0026gt;\u0026gt; \u0026#34;${_LOG_FPATH}\u0026#34; (5) docker exec -i \u0026#34;${_CONTAINER_NAME}\u0026#34; asciidoctor \u0026#34;$@\u0026#34; (6)      1 ログファイルのパスを指定。   2 起動した日本時間を変数にセット。   3 『コンテナ名』を環境変数を使用して作成。   4 ログのディレクトリがない場合は作成。   5 ログに日時と使用するコンテナ名、引数を追記。   6 作成した『コンテナ名』のコンテナで asciidoctor を実行。        これは Docker-from-Docker を使って実体の asciidoctor を実行するために使います。 [3] hadv-hugo/Dockerfile をビルドして作るイメージ（h16k148/hadv-hugo）の /usr/local/bin にコピーされます。 自身が配備されたコンテナを作成した [PREFIX]-hadv-asciidoctor コンテナにある asciidoctor を実行し、コンテナ名や引数等をログに記録します。\n      [5] devcontainer.json 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 {\u0026#34;name\u0026#34;:\u0026#34;${localWorkspaceFolderBasename}\u0026#34;,\u0026#34;dockerComposeFile\u0026#34;:\u0026#34;docker-compose.yml\u0026#34;,(1) \u0026#34;service\u0026#34;:\u0026#34;hadv-asciidoctor-sv\u0026#34;,(2) \u0026#34;workspaceFolder\u0026#34;:\u0026#34;/documents\u0026#34;,\u0026#34;settings\u0026#34;:{\u0026#34;terminal.integrated.shell.linux\u0026#34;:\u0026#34;/bin/bash\u0026#34;},\u0026#34;extensions\u0026#34;:[(3) \u0026#34;asciidoctor.asciidoctor-vscode\u0026#34;,\u0026#34;tamasfe.even-better-toml\u0026#34;,\u0026#34;mhutchie.git-graph\u0026#34;,\u0026#34;eamodio.gitlens\u0026#34;,\u0026#34;donjayamanne.githistory\u0026#34;,\u0026#34;oderwat.indent-rainbow\u0026#34;,\u0026#34;christian-kohler.path-intellisense\u0026#34;,\u0026#34;esbenp.prettier-vscode\u0026#34;,\u0026#34;visualstudioexptteam.vscodeintellicode\u0026#34;,\u0026#34;ics.japanese-proofreading\u0026#34;,\u0026#34;jebbs.plantuml\u0026#34;,\u0026#34;yog.yog-plantuml-highlight\u0026#34;],\u0026#34;initializeCommand\u0026#34;:[(4) \u0026#34;docker\u0026#34;,\u0026#34;build\u0026#34;,\u0026#34;-t\u0026#34;,\u0026#34;h16k148/hadv-hugo:latest\u0026#34;,\u0026#34;-f\u0026#34;,\u0026#34;.devcontainer/hadv-hugo/Dockerfile\u0026#34;,\u0026#34;.\u0026#34;],\u0026#34;remoteEnv\u0026#34;:{(5) \u0026#34;LOCAL_WORKSPACE_FOLDER\u0026#34;:\u0026#34;${localWorkspaceFolder}\u0026#34;,\u0026#34;COMPOSE_FORCE_WINDOWS_HOST\u0026#34;:\u0026#34;true\u0026#34;}}      1 実行する docker-compose.yml を指定。   2 接続するサービスを指定。   3 接続先にインストールする VSCode 拡張機能を指定。   4 コンテナ作成前に h16k148/hadv-hugo:latest イメージをビルド。   5 起動時に渡す環境変数を指定。        これは Dev Container の設定ファイルです。\n      [6] docker-compose.yml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 version: \u0026#34;3.9\u0026#34; services: hadv-asciidoctor-sv: container_name: ${HADV_NAME_PREFIX}-hadv-asciidoctor (1) image: h16k148/hadv-asciidoctor:latest (2) tty: true (3) init: true (4) build: context: ./hadv-asciidoctor dockerfile: Dockerfile volumes: - /var/run/docker.sock:/var/run/docker.sock (5) - ..:/documents (6) env_file: - .env (7)      1 コンテナ名を [7] .env で定義した変数と組み合わせて指定。   2 作成するイメージを h16k148/hadv-asciidoctor:latest と指定。   3 コンテナ起動時にコマンドを起動し続ける指定。   4 コンテナ起動時に軽量な init プロセスを仕込む指定。   5 Docker-from-Docker のために、docker.sock をマウント。   6 ワークスペースフォルダを /documents にマウント。   7 起動時に渡す環境変数に [7] .env の定義を使用。        これは docker-compose の設定ファイルです。 イメージのビルドやサービスの実行などの定義がされていて、[5] devcontainer.json で使われています。\n      [7] .env 1 HADV_NAME_PREFIX=h16k148 (1)      1 コンテナ名のプレフィックスを指定。        これは環境変数等を記述したファイルで、コンテナのビルドや実行時に使用します（→参照）\n       1-3. Docker-from-Docker について    2. hadv の開始 すべてのファイル・フォルダーを配備した後、VScode で hadv のルートフォルダを開くと 「Folder contains a Dev Container configuration file. Reopen folder to develop in contaier.」 というメッセージが表示されます。\n  図 2. VSCode メッセージ  「Reopen in Container」ボタンを押すと Dev Container が開始されます。\n 2-1. Dev Container を起動  図 3. Dev Container 起動後の配置図  Dev Container を起動すると [5] devcontainer.json の設定通りに動きます。\n  [3] hadv-hugo/Dockerfile から h16k148/hadv-hugo イメージをビルドします。\n  [6] docker-compose.yml で docker-compose を起動します。\n [1] hadv-asciidoctor/Dockerfile から h16k148/hadv-asciidoctor イメージをビルドします。\n  h16k148/hadv-asciidoctor イメージから [PREFIX]-hadv-asciidoctor コンテナを作成します。\n     VSCode は [PREFIX]-hadv-asciidoctor コンテナに接続します。\n   Dev Container の起動が終了して VSCode と [PREFIX]-hadv-asciidoctor コンテナが接続されると、VSCode のターミナルにてシェルを使用することができます。\n     Docker-from-Docker（Docker-outside-of-Docker とも呼ばれます） は、VSCode の Advanced Container ドキュメント内で紹介されています。\n     シェルを動かしてみましょう さっそく VSCode のターミナルから [PREFIX]-hadv-asciidoctor コンテナのシェルを動かし、コマンドの実行を試してみましょう。\n 1 2 3 4 5 6 7 8 9 10 11 12 bash-5.1# pwd /documents bash-5.1# git --version git version 2.30.2 bash-5.1# asciidoctor --version | head -n 1 Asciidoctor 2.0.12 [https://asciidoctor.org] bash-5.1# docker images REPOSITORY TAG IMAGE ID CREATED SIZE h16k148/hadv-asciidoctor latest 6fe4a37e2836 2 days ago 517MB h16k148/hadv-hugo latest 57dc22607920 5 days ago 703MB bash-5.1# hugo version hugo v0.82.0-9D960784+extended linux/amd64 BuildDate=2021-03-21T17:28:04Z VendorInfo=gohugoio    Docker-from-Docker を使ったコマンドが動くことを確認できました。 hadv では、[PREFIX]-hadv-asciidoctor コンテナを起点として Docker-from-Docker を駆使した hugo や asciidoctor を実行します。そうして作成したコンテンツやソースコードは git を使って管理します。\n    2-2. VSCode ターミナルで hugo を実行  図 4. hugo コマンド実行中の配置図  VSCode ターミナルで [PREFIX]-hadv-asciidoctor コンテナの hugo（/usr/local/bin/hugo）を実行すると、次のように動きます。\n  Docker-from-Docker で h16k148/hadv-hugo イメージからコンテナを作成します。図 4. の状態となります。\n  作成たコンテナの hugo コマンドを実行します。以下、ビルド時の例。\n  hugo コマンドは /src（つまりルートフォルダ）で起動。\n  ビルド中に AsciiDoc 形式のファイルがあった場合、/usr/local/bin/asciidoctor を実行。\n  /usr/local/bin/asciidoctor は Docker-from-Docker で [PREFIX]-hadv-asciidoctor の asciidoctor を実行。\n     hugo コマンドが終了すると、コンテナは自動的に削除され、図 3. の状態に戻ります。\n      3. 「その２」に続く… VSCode ターミナルで hugo コマンドが実行できれば hadv 環境はほとんど完成したと言っても過言ではありません。 この後、hugo の初期化やテーマ設定などをしますが、hadv そのものの話ではないため書かないことにします。\n 「その２」では構築した hadv-book の使い方を中心に書いていこうと思っています。\n   付録 A: 更新履歴 2021/04/04 ver. 1.0.1   環境変数を用いてコンテナ名やローカルワークスペースフォルダを指定するように修正\n  hugo で asciidoctor を実行した時に呼び出したコンテナ名をログ出力するように修正\n  記事全体の構成を見直し\n   2021/03/28 ver. 1.0.0   新規作成\n     付録 B: 参考リンク  VSCode    Create a development container\n  https://code.visualstudio.com/docs/remote/create-dev-container\n     Advanced Container Configuration\n  https://code.visualstudio.com/docs/remote/containers-advanced\n     devcontainer.json reference\n  https://code.visualstudio.com/docs/remote/devcontainerjson-reference\n       Asciidoctor    GitHub\n  https://github.com/asciidoctor/docker-asciidoctor\n     DockerHub\n  https://hub.docker.com/r/asciidoctor/docker-asciidoctor/\n       Hugo    GitHub\n  https://github.com/klakegg/docker-hugo\n     DockerHub\n  https://hub.docker.com/r/klakegg/hugo/\n           ","permalink":"/notes/construction/document-env/20210328-01/","summary":"はじめに hadv とは何か hadv とは、Hugo, Asciidoctor, Docker, VSCode を上手に使って構築したドキュメント執筆環境を私が勝手に名付けたものです。 2021 年 3 月時点でこのような環","title":"hadv-book 構築 - その１"},{"content":" Yokohama - night view.   はじめまして 私は現在、データサイエンスに興味を持ち、学習を開始したところです。\nこのウェブサイトは、私の個人プロジェクトやデータサイエンス、テクノロジーについて学んだこと、日々の出来事などを書いていく個人ポータルサイトとして作りました。\nまずは、これまで私がどのような仕事をしてきたのかを紹介します。\n2003年 ～ 2006年 現在の会社には2003年に入社し、『商工融資システム』『臨時職員給与システム』『介護システム』『学校システム』のメンテナンスを行いました。\n2004年には主にオープンソースを使用して仕事をするようになり、Windowsで動いていた自社システムをLAMP（Linux,Apache,PHP,MySQL）へ移行するプロジェクト、 自社製品のユーザーサポートサイトをXoopsをベースに構築するプロジェクト、自社ホームページの構築・保守などの業務をこなしました。\n 言語 C, VBA, Perl, PHP （, bash） フレームワーク Xoops, ZenCart データベース Access, SQLServer, MySQL 開発ツール Eclipse  2006年 ～ 2009年 2006年には公益財団法人テクノエイド協会による助成金事業として始まった『音声対話による録音図書配信システム』の開発に参加しています。 このプロジェクトでは、東京・大阪の点字図書館の協力をいただき、視覚障がい者の方たちへのヒアリングを行いながら、音響モデルなどの調整を重ねました。 音声認識・音声合成をコントロールして対話を形成する対話エンジンの開発では、セマンティック・ウェブの技術を活用して対話オントロジーを構築しました。\n2008年よりは公共図書館事業に携わり、『音声対話による録音配信システム』の経験を活かした『対話による書籍検索サービス』を構築し、図書館サブシステムとして一般に公開しました。 また同時に、地域に関するWebサイトや、地域に関することが掲載された書籍の情報を『Dublin Core』の形式で収集・蓄積するシステム、 蓄積したデータをシソーラスの形で整えられた件名標目の語彙を用いて検索して地域情報を提供するWebサービスも合わせて構築し一般公開しました。 これらは10年間、とくに問題が起きることもなく、サービスが終了するまで稼働した実績があります。\nこの頃、私は社内システム管理リーダーとしても活動しています。 中でも、社内レイアウト変更時に行った大規模な自社ネットワーク再構築では、 ファイアウォールアプライアンス製品の設定、DNSサーバー・Webサーバー・Mailサーバーの構築や、L3スイッチによるVLAN構築なども行いました。\n 言語 Python, SPARQL （, bash） フレームワーク RDFLib, Django, SQLAlchemy データベース PostgreSQL アプリケーション Julian/Julius（京都大学）, ChaSen/CaboCha（奈良先端科学技術大学院大学）,\nMeCab（京都大学/NTT）, GalateaTalk（東京大学） ネットワーク、他 Fortinet（ファイアウォール）, CentreCom（L3スイッチ）, OpenDNS, Postfix, Apache 開発ツール Subversion, PukiWiki, Eclipse  2009年 ～ 2012年 主力製品である公共図書館システムの次期プロトタイプ開発を任され（2021年時点で販売している製品のプロトタイプ）、多言語対応（UTF-8）と全文検索エンジン導入を主な任務としてゼロからスタートしました。 このプロトタイプは多言語に対応することはもちろん、数千にもおよぶ書誌メタデータのほぼすべてに対して高速な検索が可能であり、会社が主催するシステム研究会では参加者に高く評価されました。\nこの成果により次期システムのプラットフォームは、それまでの製品を支えていたIBM AS/400,RPGからLinux,Javaに切り替えることが決まり、正式に次期システム開発プロジェクトが発足しました。\nプロジェクトでは、図書館の保有する書誌メタデータを管理・検索する機能の開発チームリーダーとして、また、プロジェクト全体における開発基盤構築の責任者として開発技術の普及に尽力しました。\n本格的なJava開発経験のあるメンバーが一人もいない状態からのスタートでしたが、2012年末には最初のお客様にシステムを導入することができました。\n 言語 Java （, bash） フレームワーク SpringFramework, Hibernate, Wicket, Lucene, Maven, Swing ＡＰサーバー Tomcat データベース PostgreSQL, Solr 開発ツール Trac, Jenkins, Subversion, Eclipse  2013年 ～ 引き続き、公共図書館システムの新規導入、旧バージョンからの切り替え、新機能開発や保守業務、といった製品にかかわる一連の業務に携わっています。\n 導入実績（全体のうち政令指定都市 1 館）  東京都：11 館（うち、23区：5 館） 埼玉県：3 館 神奈川県：4 館 静岡県：3 館   電子書籍対応（2016/5-） 日本十進分類法（NDC）新訂10版対応（2017/1-） Java11 対応（2019/6-） ビルドシステムのDocker環境移行（2019/7-） 日本目録規則2018版対応（2021/2-）  私の背景  Yokosuka - ocean view.   1978年に神奈川県の横浜で生まれ、横須賀で育ちました。\n原体験 私のその後に大きな影響を与えた出来事は、小学生になりたての頃に叔父が家にコンピューターを持ってきてくれたことでした。\nそれはカセットテープ（音楽などに使われていたものと同じ媒体だったと記憶しています）を、パソコンに接続してあるデッキにセットして、本に書かれたソースコードと思われる文字列をキーボードで入力するとゲームが遊べるというものでした。 スネーキーとかパックマンで遊んでいた記憶があります。\nまだファミリーコンピューターも手にしていない頃ですが、なぜこんな意味不明の文字を入力するとゲームができるのかな、と不思議に思ったものです。\n別れと再会 しかしその大好きだった叔父は小学校の時に他界してしまい、コンピューターとの縁もそこで途切れてしまいました。\n成長するにつれて、自分に何ができるのか、何がしたいのか、迷い、理由あって大学には行かずに社会人となり、紆余曲折を経た後、最終的にエンジニアの道にたどり着きました。\nあぁ、自分はこういうことがやりたかったんだ、と、それに気付いた時、もっと勉強しておきたかったと思いました。\nそして、、、 そのせいなのか、いつも新しい知識・経験に飢えています。\nつい数年前、私はオジになりました。\nあらゆるところでコンピューターが動いているこの時代、義務教育にも取り入れられるこの時代、私も何かの形で、オジとして、伝えられるものがあったらいいなと日々を過ごしています。\n","permalink":"/about/","summary":"Yokohama - night view. はじめまして 私は現在、データサイエンスに興味を持ち、学習を開始したところです。 このウェブサイトは、私の個人プロジェクトやデータサイエ","title":"About"},{"content":" はじめに この文書では、Windows10 環境において、Asciidoctor の 公式Dockerイメージを中心に、 VSCodeの拡張機能 「AsciiDoc」と 「Remote - Containers」を用いた AsciiDoc 執筆環境の構築方法などを紹介します。\n     このドキュメントは Asciidoc で書かれています。背景を白くした方が見やすいです。     [参考] その他のドキュメント執筆環境について これまで使用してきた様々な形式のドキュメントについて経験したことの一端を書き残しますが、興味がなければスルーしてください。\n  MS Excel/Word を使った経験から…（クリックで開きます）   個人としての使用感について\n   機能が豊富で、やりたいことに困らない。\n   書き込む情報量が多くなるとアプリケーションが重くなる。\n     チームとしての使用感について\n   複数人で同じファイルを使用する場合、ロックしたまま放置されることがある。\n     トラブルについて\n   簡単に削除できてしまい、削除されたデータは簡単には戻らない。\n     品質について\n   多くの校正を経て作られた一点ものの資料は美しい。\n   編集者の Excel/Word スキルがそのまま反映され、品質がバラバラになる。\n   資料の変更箇所のハイライトが残されたまま放置される。\n   Excel のセル内に書かれた文字列は、見たままに印刷されない。\n     互換ソフトの存在について\n   購入コストが削減できる。\n   作業コストが上がる。\n   完全互換でないため、マクロや VBA が使えなくなる。また、作れなくなる。\n   Excel/Word と互換ソフトが混在する場合、非互換部分が悪影響を及ぼして、保存するたびに壊れていく（スタイルなど）。\n   外部から入手したマクロ/VBA ツールなどを正常に動かすために、MS Excel/Word がインストールされている環境にファイルを移動して作業することになり、余計な時間がかかる。\n     履歴管理について\n   ドキュメント内に「更新履歴ページ」を作り履歴管理をすると、それ自体の更新を忘れることがある。\n   「更新履歴ページ」に書かれていることがすべてであり、それ以上の履歴を追うことができない。\n   ファイルの移動/コピーが簡単であるためか、他部署により有用な資料が持ち出され、様々な派生バージョン（外部向け資料など）が出来上がる（最初に書いた人が誰なのかも分からなくなる）。\n   ファイルをリネームして過去世代のデータを残すも、リネームの命名規則が守られない。\n          Wiki System を使った経験から…（クリックで開きます）   個人としての使用感について\n   Web の TextArea に入力するため、通常のテキストエディタの機能にも劣る。\n   書きながらプレビューできないため、Wiki 書式を身につけなければ使いづらいところにハードルがあり、利用者が限られていく。\n   書きながらプレビューできないため、途中で壊れたことに気付きづらい。\n   他形式（pdf など）への変換ができず、Web サーバに接続可能な環境でなければ使うことができない。\n   使える書式が少なすぎる。\n     チームとしての使用感について\n   ドキュメントが１箇所にまとまる（別の形式を併用しない限り）。\n   複数人で作業していてもロックはされないが、衝突した場合、Web ページ上でマージしなければならない。\n   メンバーが積極的に利用し続けないと、あっという間に情報は古くなり、廃れる。\n     品質について\n   一定レベルは保てる。\n   限られた Wiki 書式で見やすく使いやすい文章を作るにはセンスが求められる。\n     運用について\n   書き溜めた Wiki 書式データを他の環境に移行することは難しいため、新しいシステムに移行し辛い。\n   専用のデータバックアップの仕組みを作る必要がある。\n   障害により wiki システムが壊れた時のリストア作業が大変。\n         Markdown を使った経験から…（クリックで開きます）   個人としての使用感について\n   テキストベースであるためデータを Git 等で管理しやすい。\n   標準仕様というものがないため方言が多く、ツールとマッチしないケースが出てくる（機能に不足感→独自に拡張→方言出現）。\n     チームとしての使用感について\n   経験なし\n     環境構築について\n   VSCode + 各種プラグイン/ツール類（graphviz, pandoc, plantuml）などで構築した場合、環境構築の手順が多すぎて作業グループ全体で揃えるのが大変。\n           1. システム概要 1.1. システム構成イメージ システム構成イメージを簡易的な配置図にて紹介します。\n  図 1. システム構成イメージ   1.2. システム使用イメージ 構築したシステムを使用するイメージです。\n  Docker Container を起動するときに、Document Folder をマウント（①）しておく。\n  VSCode の Remote-Containers プラグインで起動中のコンテナに接続（②）すると VSCode Agent が作られ、ここに VSCode 拡張機能をインストールする（Asciidoctor 拡張機能など）\n  VSCode で AsciiDoc ファイルを編集（③）する（Asciidoctor 拡張機能のプレビュー機能を使用）\n  完成した AsciiDoc File を HTML5 や PDF に変換し保存（④）する。\n  Asciidoc File は Git 等のバージョン管理システムにて管理（⑤）する。\n      2. システム構築手順 2.1. Docker 環境構築 ここですべきことは、\n   WSL2 を使用可能にする\n  Docker Desktop For Windows のインストール（バックエンド：WSL2）する\n   ことです。 この時点でコマンドプロンプトから docker コマンドが実行できれば問題ないです。\n  参考 URL  https://docs.microsoft.com/ja-jp/windows/wsl/install-win10 https://docs.docker.jp/docker-for-windows/install.html\n    2.2. コンテナ起動 Windows 10 上の Document Folder を\n 1 C:\\Users\\Name\\MyDocs    とした場合、コンテナは次のコマンドで起動します。\n 1 2 3 docker run --name docker-asciidoctor-vscode \\ (1) --volume=\u0026#39;C:\\Users\\Name\\MyDocs:/documents\u0026#39; \\ (2) -it -d asciidoctor/docker-asciidoctor /bin/bash (3)      1 docker-asciidoctor-vscode としていますが、任意の名前をつけてかまいません。   2 Windows 10 上の Document Folder を 公式 Asciidoctor イメージ推奨の /documents にマウントします。   3 バックグラウンドで asciidoctor/docker-asciidoctor イメージの /bin/bash を起動します。    同様の内容で Docker Desktop の GUI を使って起動することも可能です。\n   2.3. VSCode および拡張機能のインストール ここですべきことは、\n   最新版の VSCode をインストールする\n  拡張機能「Remote-Containers」（ms-vscode-remote.remote-containers）を導入する\n  拡張機能「AsciiDoc」（asciidoctor.asciidoctor-vscode）を導入する\n   ことです。\n  参考 URL  https://code.visualstudio.com/docs/setup/windows https://code.visualstudio.com/docs/editor/extension-gallery\n    2.4. VSCode の設定 VSCode に次の設定を追加します。\n 表 1. 設定項目     設定項目 設定値 備考     asciidoc.asciidoctor_command\n asciidoctor -r asciidoctor-diagram\n 必須\n   asciidoc.asciidoctorpdf_command\n asciidoctor-pdf -r asciidoctor-diagram -r /documents/asciidoc/resources/.pdf/theme-business-001/prawn-svg-config.rb\n 必須 コンテナ上のパスを指定する prawn-svg-config.rb については表外で説明する\n   asciidoc.use_asciidoctor_js\n false\n 必須\n   asciidoc.use_asciidoctorpdf\n true\n 必須\n   asciidoc.preview.useEditorStyle\n false\n *.adoc 内でスタイルの指定をするので、無効でよい\n    svg 画像に日本語を含める場合の対応 ここでは「prawn-svg-config.rb」という名前を使っていますが、中身が同じであれば名前は別でも大丈夫です。 asciidoctor-pdf で svg 形式画像を出力する際、svg 形式画像に日本語が含まれると「￢」と表示されてしまう問題の対策として、次のコードを読み込ませる必要があります。\n 1 2 3 Prawn::Svg::Font::GENERIC_CSS_FONT_MAPPING.merge!( \u0026#39;sans-serif\u0026#39; =\u0026gt; \u0026#39;KaiGen Gothic JP\u0026#39; )    指定可能なフォントは、使用しているテーマで定義済みのものに限られます。\n    参考 URL  https://code.visualstudio.com/docs/getstarted/settings https://github.com/asciidoctor/asciidoctor-pdf/issues/82#issuecomment-134949038\n      3. 使用方法 3.1. VSCode で起動中のコンテナに接続 Ctrl+Shift+P もしくは F1 で『Remote-Containers: Attach to Running Container…​』を実行し、ポップアップ表示された「docker-asciidoctor-vscode」コンテナを選択すると、接続が開始されます。\n  3.2. コンテナ内に VSCode 拡張機能をインストール Ctrl+Shift+X で拡張機能一覧を開き、CONTAINER リストの  アイコン（ローカル拡張機能をリモートにインストール）をクリックして、インストールする拡張機能を選択し、インストールを実施します。\n  3.3. Document Folder 内の *.adoc ファイルを開く Ctrl+K Ctrl+O もしくは 「ファイル  フォルダを開く」で /documents フォルダを開き、Ctrl+Shift+E で表示されるエクスプローラーで /documents ディレクトリ以下のファイルを開きます。\n  3.4. *.adoc ファイルの編集とプレビュー asciidoctor 書式でファイルに内容を記述します。 Ctrl+K V でサイドにプレビューを開きます。 テキストを編集すると、プレビュー画面も更新されます。\n  参考 URL  https://docs.asciidoctor.org/asciidoc/latest/ https://takumon.github.io/asciidoc-syntax-quick-reference-japanese-translation/\n    3.5. html/pdf ファイルの出力 Ctrl+Shift+P もしくは F1 で『AsciiDoc: Save HTML document』を実行すると、*.adoc と同じディレクトリに html ファイルが保存されます。 また、 Ctrl+Shift+P もしくは F1 で『AsciiDoc: Export document as PDF』を実行すると、指定した出力先に PDF ファイルが保存されます。\n    ","permalink":"/notes/construction/document-env/20210321-01/","summary":"はじめに この文書では、Windows10 環境において、Asciidoctor の 公式Dockerイメージを中心に、 VSCodeの拡張機能 「As","title":"AsciiDoc 執筆環境構築"},{"content":"はじめに\u0026hellip; Git の開発が 2005年に開始され、2008年には GitHub が登場しました。\n当時、私は「音声対話システム」を作っていました、Subversion を使って。\n時が経つのは早いもので、その後も会社で Subversion から Git に切り替える機会はもらえず、いまに至るまで、会社では Subversion を使い続けています。 所属チームとは別のチームですが、Microsoft Visual SourceSafe も現役のままです。\nこの部分に関しては、ですが、まさに大陸と隔絶された陸の孤島、ガラパゴスにいる生きた化石のような気持ちになっています。 しかし、いくら会社が使わなかったとはいえ、そんなことを理由に取り組んでこなかったのは自分の怠慢です。 ・・・『個人的に使えばいいじゃないか』御尤もです、言い訳はカッコワルイですね。\n厳密にいえば、私が全く使ってこなかったかと言えばウソになります。 さまざまなオープンソースプロジェクトが GitHub 上にある以上、そこからソースコードを取得することくらいはありました。 ですが、それだけでは化石（＊いしのなかにいる＊）とほぼ変わりません。 そう思っていながら何もしなければ化石どころか消失（＊うしなわれた＊）してしまいますので、いよいよ生身となる（＊ささやき － いのり － えいしょう － ねんじろ！＊）ために動き出さなければいけませんよね、 まずは GitHub Pages からイジリはじめて、そこを脱却していけたらなと思っています。\n情熱プログラマー 「情熱プログラマー ソフトウェア開発者の幸せな生き方」という本を読んでいます。 なるほど、、、イントロダクションからグサッとくるものがあります。なぜ化石になっていったのかを上手に説明されている気分です。\nそれなりに成果は残せた、そのままそこで歯車の一部となって働き続けることもできるだろう。しかし、成果を残す前に懐いていた「これまで不便だったところを劇的に変えて見せたい」というような気持ちにはもうなれない。 システムはメンドクサイことを簡単に済ましたり、とても一人じゃできなかったことを一人でできるようにしたり、果ては、人間には不可能なことを可能にしたり、そんな魅力が詰まったものではなかったのか。 それを作りたい、そういう欲求のまま新しいことにチャレンジしていける事の方が、保証された仕事と共に日々安穏に過ごすことよりも大事なのではないか、そう思わされました。\nこの本は 2010年に発売されたんですね、、、ちょうど、RPG から Java への切り替えを目指していた頃です。そんな話も出てきたりして、いちいち心に刺さります。\n「一番の下手くそでいよう」の意味、そういうことか。\nそしたら、一番上手になっちゃったら、新しく一番の下手くそでいれる場所を求めた方がいいのかな。なるほどなるほど、ガラパゴスの恐竜よりも新天地のネズミの方がいいに違いない。 ずっと、思っていたことでもある。外海に出てみれば、とても凄いことをしている人たちがたくさんいて、当たり前のように高度な仕事をしているのではないか。 自分はいったいどれくらいのレベルにあるんだろう、わからない。よく、そんなことを考えていました。\n「一番の下手くそでいる」ことが悪いことではなく、むしろ自分にとってプラスが大きい、そう思うと自分自身がそのような「ソフトウェア開発者の幸せな生き方」ができていた時期は確かに楽しかったと、思い出しました。\n・・・途中ですが、今日はここまで。\n何がなんだか分からない独り言を書いてしまいましたが、きっと同じ本を読んだ人には伝わるんじゃないでしょうか。\n個人ポータル Amazon のレビューを見て、この本に興味を持ちました。インターネットで何人かのブログの書評を見ていく内に、個人ポータルサイトについて述べている方がいました。\nそれを見ただけで、肝心の本も読まずに Jekyll を試し、Hugo を試し、Gatsby を調べて Hugo に戻り、Hugo の Theme で右往左往、、、もっと早く読めばよかったのにと、本を買ってから思いました（いったい何をやっているんだか）。\nつい環境構築でいろいろこだわってしまい、最終的に、\n VSCode の devcontainer を使うことで環境を汚さず起動も簡単な Docker 環境。 Hugo の記事を Markdown だけではなく AsciiDoc でもプレビューしながら書ける。 AsciiDoc で書いた記事はそのまま PDF にもキレイに出力できる。  …というものを作り、それを使ってこれを書いています。もちろんソースはすべて GitHub で管理です。\nいろいろなドキュメントを書く時に非常に便利なので、 そのうちテンプレートのようなものを GitHub の Public プロジェクトとして公開してみようかとも思っています。\n","permalink":"/posts/2021/03/2021-03-21-my-1st-github-page/","summary":"はじめに\u0026hellip; Git の開発が 2005年に開始され、2008年には GitHub が登場しました。 当時、私は「音声対話システム」を作っていました、Su","title":"日記：GitHub Page で個人ポータル"}]