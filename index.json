[{"content":" はじめに hadv とは何か hadv とは、Hugo, Asciidoctor, Docker, VSCode を上手に使って構築したドキュメント執筆環境を私が勝手に名付けたものです。2021 年 3 月時点でこのような構築をしている例はインターネット上では見かけていませんので、独自の方法だと思っています。 ちなみに、タイトルの hadv-book とは「hadv 環境上に Hugo の book テーマを使って構築したドキュメント執筆環境のひな形」を指しています。この文書の最終目的は、hadv-book を構築することです。\n     インターネットで検索すると HAdV（Molecular Evolution of Human Adenovirus）と記述される「ヒトアデノウィルス」なんてものが出てきますが、、、ジャンルも違うので気にしてません。      hadv の特徴   VSCode の devcontainer 機能を使用して、ローカル環境を汚さずに快適なドキュメント執筆環境が手に入ります。\n  Hugo, Asciidoctor それぞれの公式 Docker イメージを拡張して使用しています。\n  Hugo（静的サイトジェネレーター）を使ってドキュメントを静的なサイトとして公開できます。\n  Hugo で公開するドキュメントを AsciiDoc 形式（Asciidoctor を使用）で記述することができます。\n  VSCode で Markdown 形式、AsciiDoc 形式のドキュメントをプレビューしながら記述できます。\n  devcontainer の設定を変更するとベースとなる公式 Docker イメージのバージョンを更新できます。\n    このドキュメントについて このドキュメントでは、hadv-book 構築に必要だった手順をすべて公開しますが、文章が無駄に長くなることを避けるために説明は控え目にしています。公開後も改善点が見つかり次第、更新していくつもりです。\n     hadv-book では Hugo の book テーマを使用させてもらいますが、別のテーマを使って hadv 環境を作ることもモチロン可能ですので、気が向いたらチャレンジしてみてください。        1. Dev Container の構築 1-1. ファイル・フォルダー構成図 hadv 環境を構築するため任意の場所にフォルダーを用意し、図１．のようにファイルを配備します。\n  図 1. ファイル・フォルダー構成      各ファイルの中身については、1-5. 各ファイルの内容 にて説明しています。      1-2. Dev Container の起動方法 VScodeで [root] フォルダーを開くと「Folder contains a Dev Container configuration file. Reopen folder to develop in contaier.」というメッセージが表示され、「Reopen in Container」ボタンを押すと Dev Container が開始されます。\n  図 2. VSCode メッセージ  Dev Container を開始した時のにどのような処理が行われるかについては [5] devcontainer.json にて定義しています。devcontainer.json の仕様については英文ですが 公式ドキュメント を参照するのが一番よいと思います。\n  1-3. Dev Container を起動する  図 3. Dev Container 起動後の配置図  Dev Container を起動すると、VSCode は [5] devcontainer.json の設定に基づいて、次のような処理を行います。\n   h16k148/hadv-asciidoctor イメージから hadv-asciidoctor コンテナを作成します。\n  hadv-asciidoctor コンテナ作成時に、コンテナ内 /documents に [root] がマウントします。\n  hadv-asciidoctor コンテナ作成時に、コンテナ内 /var/run/docker.sock に WSL2 の /var/run/docker.sock をマウントし、これにより hadv-asciidoctor コンテナ内の Docker CLI から WSL2 上の Docker イメージ/コンテナにアクセスできるようになります。（Docker-from-Docker）\n   Dev Container の起動が終了し、VSCode と hadv-asciidoctor コンテナが接続される、VSCode のターミナルにて hadv-asciidoctor コンテナ内のシェルを使用することができます。\n     Docker-from-Docker（Docker-outside-of-Docker とも呼ばれます） は、VSCode の Advanced Container ドキュメント内で紹介されています。\n     hadv-asciidoctor コンテナのシェルを動かしてみましょう さっそく hadv-asciidoctor コンテナのシェルで 図 3. の中に書かれているコマンドを実行してみましょう。 ※ ↓スクロールバーが見えませんが、右にスクロールします。\n bash-5.1# pwd /documents bash-5.1# git --version git version 2.30.2 bash-5.1# asciidoctor --version Asciidoctor 2.0.12 [https://asciidoctor.org] Runtime Environment (ruby 2.7.2p137 (2020-10-01 revision 5445e04352) [x86_64-linux-musl]) (lc:UTF-8 fs:UTF-8 in:UTF-8 ex:UTF-8) bash-5.1# docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 2c291c32b9d2 h16k148/hadv-asciidoctor:latest \u0026#34;/bin/bash\u0026#34; 11 hours ago Up 6 hours hadv-asciidoctor bash-5.1# hugo version hugo v0.82.0-9D960784+extended linux/amd64 BuildDate=2021-03-21T17:28:04Z VendorInfo=gohugoio   Docker-from-Docker を使った hugo コマンドの実行も確認できました。hadv では、hadv-asciidoctor コンテナを起点として、hugo や asciidoctor コマンドを実行してコンテンツを作成し、そのソースコードを git で管理します。\n    1-4. hadv-asciidoctor コンテナの hugo を実行する  図 4. hugo コマンド実行中の配置図  hugo コマンドを実行すると、次のような処理を行います。\n   hadv-asciidoctor コンテナの /usr/local/bin/hugo を実行すると、Docker-from-Docker で h16k148/hadv-hugo イメージから hadv-hugo コンテナを作成し、その中の hugo コマンドを実行します。\n  hadv-hugo コンテナの hugo コマンドは /src（つまり [root] フォルダ）で起動します。\n  hadv-hugo コンテナの hugo コマンドでビルド中に AsciiDoc 形式のファイルがあった場合、hadv-hugo コンテナに配備した /usr/local/bin/asciidoctor が呼ばれます。\n  hadv-hugo コンテナの /usr/local/bin/asciidoctor も Docker-from-Docker の機能を使い、hadv-asciidoctor コンテナ内の asciidoctor コマンドを実行します。\n   hugo コマンドが終了すると、作成された hadv-hugo コンテナは自動的に削除され、図 3. の状態に戻ります。\n  1-5. 各ファイルの内容 大事なところだけコメント書きます。\n [1] hadv-asciidoctor/Dockerfile 1 2 3 4 5 6 7 8 9 10 ARGDOCKER_ASCIIDOCTOR_VERSION=latest (1) FROMasciidoctor/docker-asciidoctor:${DOCKER_ASCIIDOCTOR_VERSION} (2) LABELversion=\u0026#34;20210324\u0026#34; LABELdescription=\u0026#34;Asciidoctorの公式Dockerイメージをカスタマイズ。\u0026#34; RUN apk --no-cache add docker-cli git-subtree \\ (3) \u0026amp;\u0026amp; gem install --no-document asciidoctor-html5s asciidoctor-rouge (4) RUN ln -s /documents /src (5) COPYhugo /usr/local/bin (6)      1 デフォルトのバージョン。   2 [6] docker-compose.yml 内の DOCKER_ASCIIDOCTOR_VERSION 指定を書き換えることで、使用するバージョンを上書きできます。   3 Docker-from-Docker のために docker-cli を追加。任意で git の機能を追加。   4 Asciidoctor の拡張機能を追加。   5 重要なシンボリックリンクを設置。   6 hugo コマンドを /usr/local/bin の下に配備。        重要なシンボリックリンク hadv-hugo コンテナ内の hugo コマンドは、/src フォルダを Hugo root directory として動作するため、asciidoctor を呼び出した時に付与する引数には /src を起点とするディレクトリパスが含まれたりします。そのため、hadv-asciidoctor コンテナ内において /documents を指す /src シンボリックリンクがないと、ディレクトリが存在しないため正常に動作しません。\n      [2] hadv-asciidoctor/hugo 1 2 3 4 5 6 #!/bin/bash _INSPECT_FORMAT=\u0026#39;{{range .Mounts}}{{if eq .Destination \u0026#34;/documents\u0026#34;}}{{.Source}}{{end}}{{end}}\u0026#39; _VSCODE_WORKSPACE_FOLDER=$(docker inspect --format=\u0026#34;${_INSPECT_FORMAT}\u0026#34; hadv-asciidoctor) (1) docker run --rm -it -v \u0026#34;${_VSCODE_WORKSPACE_FOLDER}:/src\u0026#34; \\ -v \u0026#34;/var/run/docker.sock:/var/run/docker.sock\u0026#34; \\ (2) -p 1313:1313 h16k148/hadv-hugo:latest \u0026#34;$@\u0026#34; (3)      1 Docker-from-Docker を使って、hadv-asciidoctor コンテナ情報から /documents にマウントしているパスを取得します。   2 Docker-from-Docker のために、/var/run/docker.sock をマウントします。   3 Docker-from-Docker を使って、h16k148/hadv-hugo イメージからコンテナを作成し、その中の hugo コマンドを実行します。     [3] hadv-hugo/Dockerfile 1 2 3 4 5 6 7 8 ARGHUGO_VERSION=ext-alpine (1) FROMklakegg/hugo:${HUGO_VERSION} (2) LABELversion=\u0026#34;20210324\u0026#34; LABELdescription=\u0026#34;Hugoの公式DockerImageをカスタマイズ。\u0026#34; RUN apk --no-cache add docker-cli (3) COPY.devcontainer/hadv-hugo/asciidoctor /usr/local/bin (4)      1 デフォルトのバージョン。   2 [5] devcontainer.json 内の HUGO_VERSION 指定を書き換えることで、使用するバージョンを上書きできます。   3 Docker-from-Docker のために docker-cli を追加。   4 asciidoctor コマンドを /usr/local/bin の下に配備。     [4] hadv-hugo/asciidoctor 1 2 #!/bin/bash docker exec -i hadv-asciidoctor asciidoctor \u0026#34;$@\u0026#34; (1)      1 hadv-asciidoctor コンテナの asciidoctor コマンドを実行します。     [5] devcontainer.json 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 {\u0026#34;name\u0026#34;:\u0026#34;hadv-containers\u0026#34;,\u0026#34;dockerComposeFile\u0026#34;:\u0026#34;docker-compose.yml\u0026#34;,(1) \u0026#34;service\u0026#34;:\u0026#34;hadv-asciidoctor-sv\u0026#34;,(2) \u0026#34;workspaceFolder\u0026#34;:\u0026#34;/documents\u0026#34;,\u0026#34;settings\u0026#34;:{\u0026#34;terminal.integrated.shell.linux\u0026#34;:\u0026#34;/bin/bash\u0026#34;},\u0026#34;extensions\u0026#34;:[(3) \u0026#34;asciidoctor.asciidoctor-vscode\u0026#34;,\u0026#34;tamasfe.even-better-toml\u0026#34;,\u0026#34;mhutchie.git-graph\u0026#34;,\u0026#34;eamodio.gitlens\u0026#34;,\u0026#34;donjayamanne.githistory\u0026#34;,\u0026#34;oderwat.indent-rainbow\u0026#34;,\u0026#34;christian-kohler.path-intellisense\u0026#34;,\u0026#34;esbenp.prettier-vscode\u0026#34;,\u0026#34;visualstudioexptteam.vscodeintellicode\u0026#34;,\u0026#34;ics.japanese-proofreading\u0026#34;,\u0026#34;jebbs.plantuml\u0026#34;,\u0026#34;yog.yog-plantuml-highlight\u0026#34;],\u0026#34;initializeCommand\u0026#34;:[(4) \u0026#34;docker\u0026#34;,\u0026#34;build\u0026#34;,\u0026#34;--build-arg\u0026#34;,\u0026#34;HUGO_VERSION=0.82.0-ext-alpine\u0026#34;,(5) \u0026#34;-t\u0026#34;,\u0026#34;h16k148/hadv-hugo:latest\u0026#34;,\u0026#34;-f\u0026#34;,\u0026#34;.devcontainer/hadv-hugo/Dockerfile\u0026#34;,\u0026#34;.\u0026#34;]}      1 実行する docker-compose.yml を指定。   2 接続するサービスを指定。   3 接続先にインストールする VSCode 拡張機能を指定。   4 コンテナを作成する前に実行するコマンドで、h16k148/hadv-hugo をビルド。   5 ベースとなるイメージのバージョンを指定。     [6] docker-compose.yml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 version: \u0026#34;3.9\u0026#34; services: hadv-asciidoctor-sv: container_name: hadv-asciidoctor image: h16k148/hadv-asciidoctor:latest tty: true (1) init: true (2) build: context: ./hadv-asciidoctor dockerfile: Dockerfile args: - DOCKER_ASCIIDOCTOR_VERSION=1.3.3 (3) volumes: - /var/run/docker.sock:/var/run/docker.sock (4) - ..:/documents      1 コマンドを起動し続ける指定。   2 起動時に軽量な init プロセスを仕込む指定。   3 ベースとなるイメージのバージョンを指定   4 Docker-from-Docker のために、docker.sock をマウントします。        2. この次にすること Dev Container が起動したところで hadv 環境はほとんど完成したと言っても良いくらいです。 この後は、hugo の初期化や hugo のテーマ設定などを行っていきますが、hadv そのものの話ではないため書きません。hugo は使用するテーマによって設定作業も大きく変わってきてしまいますし、私自身が golang のテンプレートや CSS/SCSS/SASS などに明るいわけではないためです。\n 「その２」では、構築した hadv-book を動かしつつ、ポイントとなる設定などの紹介を中心に書いていこうと思っています。そのために、まずは実際の hadv-book を作り、公開したいと思っています。\n   3. 参考リンク  【Visual Studio Code】   Create a development container  https://code.visualstudio.com/docs/remote/create-dev-container\n Advanced Container Configuration  https://code.visualstudio.com/docs/remote/containers-advanced\n devcontainer.json reference  https://code.visualstudio.com/docs/remote/devcontainerjson-reference\n    【Asciidoctor】   GitHub  https://github.com/asciidoctor/docker-asciidoctor\n DockerHub  https://hub.docker.com/r/asciidoctor/docker-asciidoctor/\n    【Hugo】   GitHub  https://github.com/klakegg/docker-hugo\n DockerHub  https://hub.docker.com/r/klakegg/hugo/\n        ","permalink":"/notes/construction/document-env/20210324-01/","summary":"はじめに hadv とは何か hadv とは、Hugo, Asciidoctor, Docker, VSCode を上手に使って構築したドキュメント執筆環境を私が勝手に名付けたものです。2021 年 3 月時点でこのよ","title":"hadv-book 構築 - その１"},{"content":" Yokohama - night view.   はじめまして 私は現在、データサイエンスに興味を持ち、学習を開始したところです。\nこのウェブサイトは、私の個人プロジェクトやデータサイエンス、テクノロジーについて学んだこと、日々の出来事などを書いていく個人ポータルサイトとして作りました。\nまずは、これまで私がどのような仕事をしてきたのかを紹介します。\n2003年 ～ 2006年 現在の会社には2003年に入社し、『商工融資システム』『臨時職員給与システム』『介護システム』『学校システム』のメンテナンスを行いました。\n2004年には主にオープンソースを使用して仕事をするようになり、Windowsで動いていた自社システムをLAMP（Linux,Apache,PHP,MySQL）へ移行するプロジェクト、 自社製品のユーザーサポートサイトをXoopsをベースに構築するプロジェクト、自社ホームページの構築・保守などの業務をこなしました。\n 言語 C, VBA, Perl, PHP （, bash） フレームワーク Xoops, ZenCart データベース Access, SQLServer, MySQL 開発ツール Eclipse  2006年 ～ 2009年 2006年には公益財団法人テクノエイド協会による助成金事業として始まった『音声対話による録音図書配信システム』の開発に参加しています。 このプロジェクトでは、東京・大阪の点字図書館の協力をいただき、視覚障がい者の方たちへのヒアリングを行いながら、音響モデルなどの調整を重ねました。 音声認識・音声合成をコントロールして対話を形成する対話エンジンの開発では、セマンティック・ウェブの技術を活用して対話オントロジーを構築しました。\n2008年よりは公共図書館事業に携わり、『音声対話による録音配信システム』の経験を活かした『対話による書籍検索サービス』を構築し、図書館サブシステムとして一般に公開しました。 また同時に、地域に関するWebサイトや、地域に関することが掲載された書籍の情報を『Dublin Core』の形式で収集・蓄積するシステム、 蓄積したデータをシソーラスの形で整えられた件名標目の語彙を用いて検索して地域情報を提供するWebサービスも合わせて構築し一般公開しました。 これらは10年間、とくに問題が起きることもなく、サービスが終了するまで稼働した実績があります。\nこの頃、私は社内システム管理リーダーとしても活動しています。 中でも、ビルの1フロアを追加した時に行った大規模な自社ネットワーク再構築では、 ファイアウォールアプライアンス製品の設定、DNSサーバー・Webサーバー・Mailサーバーの構築や、L3スイッチによるVLAN構築なども行いました。\n 言語 Python, SPARQL （, bash） フレームワーク RDFLib, Django, SQLAlchemy データベース PostgreSQL アプリケーション Julian/Julius（京都大学）, ChaSen/CaboCha（奈良先端科学技術大学院大学）,\nMeCab（京都大学/NTT）, GalateaTalk（東京大学） ネットワーク、他 Fortinet（ファイアウォール）, CentreCom（L3スイッチ）, OpenDNS, Postfix, Apache 開発ツール Subversion, PukiWiki, Eclipse  2009年 ～ 2012年 主力製品である公共図書館システムの次期プロトタイプ開発を任され（2021年時点で販売している製品のプロトタイプ）、多言語対応（UTF-8）と全文検索エンジン導入を主な任務としてゼロからスタートしました。 このプロトタイプは多言語に対応することはもちろん、数千にもおよぶ書誌メタデータのほぼすべてに対して高速な検索が可能であり、会社が主催するシステム研究会では参加者に高く評価されました。\nこの成果により次期システムのプラットフォームは、それまでの製品を支えていたIBM AS/400,RPGからLinux,Javaに切り替えることが決まり、正式に次期システム開発プロジェクトが発足しました。\nプロジェクトでは、図書館の保有する書誌メタデータを管理・検索する機能の開発チームリーダーとして、また、プロジェクト全体における開発基盤構築の責任者として開発技術の普及に尽力しました。\n本格的なJava開発経験のあるメンバーが一人もいない状態からのスタートでしたが、2012年末には最初のお客様にシステムを導入することができました。\n 言語 Java （, bash） フレームワーク SpringFramework, Hibernate, Wicket, Lucene, Maven, Swing ＡＰサーバー Tomcat データベース PostgreSQL, Solr 開発ツール Trac, Jenkins, Subversion, Eclipse  2013年 ～ 引き続き、公共図書館システムの新規導入、旧バージョンからの切り替え、新機能開発や保守業務、といった製品にかかわる一連の業務に携わっています。\n 導入実績（全体のうち政令指定都市 1 館）  東京都：10 館（うち、23区：5 館） 埼玉県：4 館 神奈川県：4 館 静岡県：3 館   電子書籍対応（2016/5-） 日本十進分類法（NDC）新訂10版対応（2017/1-） Java11 対応（2019/6-） ビルドシステムのDocker環境移行（2019/7-） 日本目録規則2018版対応（2021/2-）  私の背景  Yokosuka - ocean view.   1978年に神奈川県の横浜で生まれ、横須賀で育ちました。\n原体験 私のその後に大きな影響を与えた出来事は、小学生になりたての頃に叔父が家にコンピューターを持ってきてくれたことでした。\nそれはカセットテープ（音楽などに使われていたものと同じ媒体だったと記憶しています）を、パソコンに接続してあるデッキにセットして、本に書かれたソースコードと思われる文字列をキーボードで入力するとゲームが遊べるというものでした。 スネーキーとかパックマンで遊んでいた記憶があります。\nまだファミリーコンピューターも手にしていない頃ですが、なぜこんな意味不明の文字を入力するとゲームができるのかな、と不思議に思ったものです。\n別れと再会 しかしその大好きだった叔父は小学校の時に他界してしまい、コンピューターとの縁もそこで途切れてしまいました。\n成長するにつれて、自分に何ができるのか、何がしたいのか、迷い、理由あって大学には行かずに社会人となり、紆余曲折を経た後、最終的にエンジニアの道にたどり着きました。\nあぁ、自分はこういうことがやりたかったんだ、と、それに気付いた時、もっと勉強しておきたかったと思いました。\nそして、、、 そのせいなのか、いつも新しい知識・経験に飢えています。\nつい数年前、私はオジになりました。\nあらゆるところでコンピューターが動いているこの時代、義務教育にも取り入れられるこの時代、私も何かの形で、オジとして、伝えられるものがあったらいいなと日々を過ごしています。\n","permalink":"/about/","summary":"Yokohama - night view. はじめまして 私は現在、データサイエンスに興味を持ち、学習を開始したところです。 このウェブサイトは、私の個人プロジェクトやデータサイエ","title":"About"},{"content":" はじめに この文書では、Windows10 環境において、Asciidoctor の 公式Dockerイメージを中心に、 VSCodeの拡張機能 「AsciiDoc」と 「Remote - Containers」を用いた AsciiDoc 執筆環境の構築方法などを紹介します。\n     このドキュメントは Asciidoc で書かれています。背景を白くした方が見やすいです。     [参考] その他のドキュメント執筆環境について これまで使用してきた様々な形式のドキュメントについて経験したことの一端を書き残しますが、興味がなければスルーしてください。\n  MS Excel/Word を使った経験から…（クリックで開きます）   個人としての使用感について\n   機能が豊富で、やりたいことに困らない。\n   書き込む情報量が多くなるとアプリケーションが重くなる。\n     チームとしての使用感について\n   複数人で同じファイルを使用する場合、ロックしたまま放置されることがある。\n     トラブルについて\n   簡単に削除できてしまい、削除されたデータは簡単には戻らない。\n     品質について\n   多くの校正を経て作られた一点ものの資料は美しい。\n   編集者の Excel/Word スキルがそのまま反映され、品質がバラバラになる。\n   資料の変更箇所のハイライトが残されたまま放置される。\n   Excel のセル内に書かれた文字列は、見たままに印刷されない。\n     互換ソフトの存在について\n   購入コストが削減できる。\n   作業コストが上がる。\n   完全互換でないため、マクロや VBA が使えなくなる。また、作れなくなる。\n   Excel/Word と互換ソフトが混在する場合、非互換部分が悪影響を及ぼして、保存するたびに壊れていく（スタイルなど）。\n   外部から入手したマクロ/VBA ツールなどを正常に動かすために、MS Excel/Word がインストールされている環境にファイルを移動して作業することになり、余計な時間がかかる。\n     履歴管理について\n   ドキュメント内に「更新履歴ページ」を作り履歴管理をすると、それ自体の更新を忘れることがある。\n   「更新履歴ページ」に書かれていることがすべてであり、それ以上の履歴を追うことができない。\n   ファイルの移動/コピーが簡単であるためか、他部署により有用な資料が持ち出され、様々な派生バージョン（外部向け資料など）が出来上がる（最初に書いた人が誰なのかも分からなくなる）。\n   ファイルをリネームして過去世代のデータを残すも、リネームの命名規則が守られない。\n          Wiki System を使った経験から…（クリックで開きます）   個人としての使用感について\n   Web の TextArea に入力するため、通常のテキストエディタの機能にも劣る。\n   書きながらプレビューできないため、Wiki 書式を身につけなければ使いづらいところにハードルがあり、利用者が限られていく。\n   書きながらプレビューできないため、途中で壊れたことに気付きづらい。\n   他形式（pdf など）への変換ができず、Web サーバに接続可能な環境でなければ使うことができない。\n   使える書式が少なすぎる。\n     チームとしての使用感について\n   ドキュメントが１箇所にまとまる（別の形式を併用しない限り）。\n   複数人で作業していてもロックはされないが、衝突した場合、Web ページ上でマージしなければならない。\n   メンバーが積極的に利用し続けないと、あっという間に情報は古くなり、廃れる。\n     品質について\n   一定レベルは保てる。\n   限られた Wiki 書式で見やすく使いやすい文章を作るにはセンスが求められる。\n     運用について\n   書き溜めた Wiki 書式データを他の環境に移行することは難しいため、新しいシステムに移行し辛い。\n   専用のデータバックアップの仕組みを作る必要がある。\n   障害により wiki システムが壊れた時のリストア作業が大変。\n         Markdown を使った経験から…（クリックで開きます）   個人としての使用感について\n   テキストベースであるためデータを Git 等で管理しやすい。\n   標準仕様というものがないため方言が多く、ツールとマッチしないケースが出てくる（機能に不足感→独自に拡張→方言出現）。\n     チームとしての使用感について\n   経験なし\n     環境構築について\n   VSCode + 各種プラグイン/ツール類（graphviz, pandoc, plantuml）などで構築した場合、環境構築の手順が多すぎて作業グループ全体で揃えるのが大変。\n           1. システム概要 1.1. システム構成イメージ システム構成イメージを簡易的な配置図にて紹介します。\n  図 1. システム構成イメージ   1.2. システム使用イメージ 構築したシステムを使用するイメージです。\n  Docker Container を起動するときに、Document Folder をマウント（①）しておく。\n  VSCode の Remote-Containers プラグインで起動中のコンテナに接続（②）すると VSCode Agent が作られ、ここに VSCode 拡張機能をインストールする（Asciidoctor 拡張機能など）\n  VSCode で AsciiDoc ファイルを編集（③）する（Asciidoctor 拡張機能のプレビュー機能を使用）\n  完成した AsciiDoc File を HTML5 や PDF に変換し保存（④）する。\n  Asciidoc File は Git 等のバージョン管理システムにて管理（⑤）する。\n      2. システム構築手順 2.1. Docker 環境構築 ここですべきことは、\n   WSL2 を使用可能にする\n  Docker Desktop For Windows のインストール（バックエンド：WSL2）する\n   ことです。 この時点でコマンドプロンプトから docker コマンドが実行できれば問題ないです。\n  参考 URL  https://docs.microsoft.com/ja-jp/windows/wsl/install-win10 https://docs.docker.jp/docker-for-windows/install.html\n    2.2. コンテナ起動 Windows 10 上の Document Folder を\n 1 C:\\Users\\Name\\MyDocs    とした場合、コンテナは次のコマンドで起動します。\n 1 2 3 docker run --name docker-asciidoctor-vscode \\ (1) --volume=\u0026#39;C:\\Users\\Name\\MyDocs:/documents\u0026#39; \\ (2) -it -d asciidoctor/docker-asciidoctor /bin/bash (3)      1 docker-asciidoctor-vscode としていますが、任意の名前をつけてかまいません。   2 Windows 10 上の Document Folder を 公式 Asciidoctor イメージ推奨の /documents にマウントします。   3 バックグラウンドで asciidoctor/docker-asciidoctor イメージの /bin/bash を起動します。    同様の内容で Docker Desktop の GUI を使って起動することも可能です。\n   2.3. VSCode および拡張機能のインストール ここですべきことは、\n   最新版の VSCode をインストールする\n  拡張機能「Remote-Containers」（ms-vscode-remote.remote-containers）を導入する\n  拡張機能「AsciiDoc」（asciidoctor.asciidoctor-vscode）を導入する\n   ことです。\n  参考 URL  https://code.visualstudio.com/docs/setup/windows https://code.visualstudio.com/docs/editor/extension-gallery\n    2.4. VSCode の設定 VSCode に次の設定を追加します。\n 表 1. 設定項目     設定項目 設定値 備考     asciidoc.asciidoctor_command\n asciidoctor -r asciidoctor-diagram\n 必須\n   asciidoc.asciidoctorpdf_command\n asciidoctor-pdf -r asciidoctor-diagram -r /documents/asciidoc/resources/.pdf/theme-business-001/prawn-svg-config.rb\n 必須 コンテナ上のパスを指定する prawn-svg-config.rb については表外で説明する\n   asciidoc.use_asciidoctor_js\n false\n 必須\n   asciidoc.use_asciidoctorpdf\n true\n 必須\n   asciidoc.preview.useEditorStyle\n false\n *.adoc 内でスタイルの指定をするので、無効でよい\n    svg 画像に日本語を含める場合の対応 ここでは「prawn-svg-config.rb」という名前を使っていますが、中身が同じであれば名前は別でも大丈夫です。 asciidoctor-pdf で svg 形式画像を出力する際、svg 形式画像に日本語が含まれると「￢」と表示されてしまう問題の対策として、次のコードを読み込ませる必要があります。\n 1 2 3 Prawn::Svg::Font::GENERIC_CSS_FONT_MAPPING.merge!( \u0026#39;sans-serif\u0026#39; =\u0026gt; \u0026#39;KaiGen Gothic JP\u0026#39; )    指定可能なフォントは、使用しているテーマで定義済みのものに限られます。\n    参考 URL  https://code.visualstudio.com/docs/getstarted/settings https://github.com/asciidoctor/asciidoctor-pdf/issues/82#issuecomment-134949038\n      3. 使用方法 3.1. VSCode で起動中のコンテナに接続 Ctrl+Shift+P もしくは F1 で『Remote-Containers: Attach to Running Container…​』を実行し、ポップアップ表示された「docker-asciidoctor-vscode」コンテナを選択すると、接続が開始されます。\n  3.2. コンテナ内に VSCode 拡張機能をインストール Ctrl+Shift+X で拡張機能一覧を開き、CONTAINER リストの  アイコン（ローカル拡張機能をリモートにインストール）をクリックして、インストールする拡張機能を選択し、インストールを実施します。\n  3.3. Document Folder 内の *.adoc ファイルを開く Ctrl+K Ctrl+O もしくは 「ファイル  フォルダを開く」で /documents フォルダを開き、Ctrl+Shift+E で表示されるエクスプローラーで /documents ディレクトリ以下のファイルを開きます。\n  3.4. *.adoc ファイルの編集とプレビュー asciidoctor 書式でファイルに内容を記述します。 Ctrl+K V でサイドにプレビューを開きます。 テキストを編集すると、プレビュー画面も更新されます。\n  参考 URL  https://docs.asciidoctor.org/asciidoc/latest/ https://takumon.github.io/asciidoc-syntax-quick-reference-japanese-translation/\n    3.5. html/pdf ファイルの出力 Ctrl+Shift+P もしくは F1 で『AsciiDoc: Save HTML document』を実行すると、*.adoc と同じディレクトリに html ファイルが保存されます。 また、 Ctrl+Shift+P もしくは F1 で『AsciiDoc: Export document as PDF』を実行すると、指定した出力先に PDF ファイルが保存されます。\n    ","permalink":"/notes/construction/document-env/20210321-01/","summary":"はじめに この文書では、Windows10 環境において、Asciidoctor の 公式Dockerイメージを中心に、 VSCodeの拡張機能 「As","title":"AsciiDoc 執筆環境構築"},{"content":"はじめに\u0026hellip; Gitの開発が 2005年に開始され、2008年にはGitHubが登場しました。\n当時、私は「音声対話システム」を作っていました、Subversionを使って。\n時が経つのは早いもので、その後も会社でSubversionからGitに切り替える機会はもらえず、いまに至るまで、会社ではSubversionを使い続けています。 所属チームとは別のチームですが、Microsoft Visual SourceSafeも現役のままです。\nこの部分に関しては、ですが、まさに大陸と隔絶された陸の孤島、ガラパゴスにいる生きた化石のような気持ちになっています。 しかし、いくら会社が使わなかったとはいえ、そんなことを理由に取り組んでこなかったのは自分の怠慢です。 ・・・『個人的に使えばいいじゃないか』御尤もです、言い訳はカッコワルイですね。\n厳密にいえば、私が全く使ってこなかったかと言えばウソになります。 さまざまなオープンソースプロジェクトがGitHub上にある以上、そこからソースコードを取得することくらいはありました。 ですが、それだけでは化石（＊いしのなかにいる＊）とほぼ変わりません。 そう思っていながら何もしなければ化石どころか消失（＊うしなわれた＊）してしまいますので、いよいよ生身となる（＊ささやき － いのり － えいしょう － ねんじろ！＊）ために動き出さなければいけませんよね、 まずはGitHub Pagesからイジリはじめて、そこを脱却していけたらなと思っています。\n情熱プログラマー 「情熱プログラマー ソフトウェア開発者の幸せな生き方」という本を読んでいます。 なるほど、、、イントロダクションからグサッとくるものがあります。なぜ化石になっていったのかを上手に説明されている気分です。\nそれなりに成果は残せた、そのままそこで歯車の一部となって働き続けることもできるだろう。しかし、成果を残す前に懐いていた「これまで不便だったところを劇的に変えて見せたい」というような気持ちにはもうなれない。 システムはメンドクサイことを簡単に済ましたり、とても一人じゃできなかったことを一人でできるようにしたり、果ては、人間には不可能なことを可能にしたり、そんな魅力が詰まったものではなかったのか。 それを作りたい、そういう欲求のまま新しいことにチャレンジしていける事の方が、保証された仕事と共に日々安穏に過ごすことよりも大事なのではないか、そう思わされました。\nこの本は2010年に発売されたんですね、、、ちょうど、RPGからJavaへの切り替えを目指していた頃です。そんな話も出てきたりして、いちいち心に刺さります。\n「一番の下手くそでいよう」の意味、そういうことか。\nそしたら、一番上手になっちゃったら、新しく一番の下手くそでいれる場所を求めた方がいいのかな。なるほどなるほど、ガラパゴスの恐竜よりも新天地のネズミの方がいいに違いない。 ずっと、思っていたことでもある。外海に出てみれば、とても凄いことをしている人たちがたくさんいて、当たり前のように高度な仕事をしているのではないか。 自分はいったいどれくらいのレベルにあるんだろう、わからない。よく、そんなことを考えていました。\n「一番の下手くそでいる」ことが悪いことではなく、むしろ自分にとってプラスが大きい、そう思うと自分自身がそのような「ソフトウェア開発者の幸せな生き方」ができていた時期は確かに楽しかったと、思い出しました。\n・・・途中ですが、今日はここまで。\n何がなんだか分からない独り言を書いてしまいましたが、きっと同じ本を読んだ人には伝わるんじゃないでしょうか。\n個人ポータル Amazonのレビューを見て、この本に興味を持ちました。インターネットで何人かのブログの書評を見ていく内に、個人ポータルサイトについて述べている方がいました。\nそれを見ただけで、肝心の本も読まずにJekyllを試し、Hugoを試し、Gatsbyを調べてHugoに戻り、HugoのThemeで右往左往、、、もっと早く読めばよかったのにと、本を買ってから思いました（いったい何をやっているんだか）。\nつい環境構築でいろいろこだわってしまい、最終的に、\n VSCodeのdevcontainerを使うことで環境を汚さず起動も簡単なDocker環境。 Hugoの記事をMarkdownだけではなくAsciiDocでもプレビューしながら書ける。 AsciiDocで書いた記事はそのままPDFにもキレイに出力できる。  …というものを作り、それを使ってこれを書いています。もちろんソースはすべてGitで管理です。\nいろいろなドキュメントを書く時に非常に便利なので、 そのうちテンプレートのようなものをGitHubのPublicプロジェクトとして公開してみようかとも思っています。\n","permalink":"/posts/2021/03/2021-03-21-my-1st-github-page/","summary":"はじめに\u0026hellip; Gitの開発が 2005年に開始され、2008年にはGitHubが登場しました。 当時、私は「音声対話システム」を作って","title":"日記：GitHub Page で個人ポータル"}]